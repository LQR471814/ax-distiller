// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package chrome

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e2afc4dDecodeAxDistillerLibChrome(in *jlexer.Lexer, out *getAXNodesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]cdpAXNode, 0, 0)
					} else {
						out.Nodes = []cdpAXNode{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 cdpAXNode
					(v1).UnmarshalEasyJSON(in)
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e2afc4dEncodeAxDistillerLibChrome(out *jwriter.Writer, in getAXNodesResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Nodes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getAXNodesResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e2afc4dEncodeAxDistillerLibChrome(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getAXNodesResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e2afc4dEncodeAxDistillerLibChrome(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getAXNodesResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e2afc4dDecodeAxDistillerLibChrome(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getAXNodesResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e2afc4dDecodeAxDistillerLibChrome(l, v)
}
func easyjson3e2afc4dDecodeAxDistillerLibChrome1(in *jlexer.Lexer, out *cdpAXValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e2afc4dEncodeAxDistillerLibChrome1(out *jwriter.Writer, in cdpAXValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v cdpAXValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e2afc4dEncodeAxDistillerLibChrome1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cdpAXValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e2afc4dEncodeAxDistillerLibChrome1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cdpAXValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e2afc4dDecodeAxDistillerLibChrome1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cdpAXValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e2afc4dDecodeAxDistillerLibChrome1(l, v)
}
func easyjson3e2afc4dDecodeAxDistillerLibChrome2(in *jlexer.Lexer, out *cdpAXNodeProp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(cdpAXValue)
				}
				(*out.Value).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e2afc4dEncodeAxDistillerLibChrome2(out *jwriter.Writer, in cdpAXNodeProp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			(*in.Value).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v cdpAXNodeProp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e2afc4dEncodeAxDistillerLibChrome2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cdpAXNodeProp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e2afc4dEncodeAxDistillerLibChrome2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cdpAXNodeProp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e2afc4dDecodeAxDistillerLibChrome2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cdpAXNodeProp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e2afc4dDecodeAxDistillerLibChrome2(l, v)
}
func easyjson3e2afc4dDecodeAxDistillerLibChrome3(in *jlexer.Lexer, out *cdpAXNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeId":
			out.NodeID = string(in.String())
		case "ignored":
			out.Ignored = bool(in.Bool())
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				if out.Role == nil {
					out.Role = new(cdpAXValue)
				}
				(*out.Role).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(cdpAXValue)
				}
				(*out.Name).UnmarshalEasyJSON(in)
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(cdpAXValue)
				}
				(*out.Description).UnmarshalEasyJSON(in)
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]cdpAXNodeProp, 0, 2)
					} else {
						out.Properties = []cdpAXNodeProp{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v4 cdpAXNodeProp
					(v4).UnmarshalEasyJSON(in)
					out.Properties = append(out.Properties, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "childIds":
			if in.IsNull() {
				in.Skip()
				out.ChildIds = nil
			} else {
				in.Delim('[')
				if out.ChildIds == nil {
					if !in.IsDelim(']') {
						out.ChildIds = make([]string, 0, 4)
					} else {
						out.ChildIds = []string{}
					}
				} else {
					out.ChildIds = (out.ChildIds)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.ChildIds = append(out.ChildIds, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "backendDOMNodeId":
			out.DomNodeId = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e2afc4dEncodeAxDistillerLibChrome3(out *jwriter.Writer, in cdpAXNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.NodeID))
	}
	{
		const prefix string = ",\"ignored\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ignored))
	}
	if in.Role != nil {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		(*in.Role).MarshalEasyJSON(out)
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		(*in.Name).MarshalEasyJSON(out)
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(*in.Description).MarshalEasyJSON(out)
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Properties {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.ChildIds) != 0 {
		const prefix string = ",\"childIds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.ChildIds {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"backendDOMNodeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.DomNodeId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v cdpAXNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e2afc4dEncodeAxDistillerLibChrome3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cdpAXNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e2afc4dEncodeAxDistillerLibChrome3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cdpAXNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e2afc4dDecodeAxDistillerLibChrome3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cdpAXNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e2afc4dDecodeAxDistillerLibChrome3(l, v)
}
